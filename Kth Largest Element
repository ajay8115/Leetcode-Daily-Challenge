 //  APPROACH 1
int findKthLargest(vector<int> &a, int k)
{
    priority_queue<int> pq(a.begin(), a.end());

    int ans = 0;
    while (k--)
    {
        ans = pq.top();
        pq.pop();
    }

    return ans;
}

//  APPROACH 2
int findKthLargest(vector<int> &nums, int k)
{
    int n = nums.size();

    priority_queue<int, vector<int>, greater<int>> pq;

    for (int i = 0; i < n; i++)
    {
        pq.push(nums[i]);
        if (pq.size() > k)
        {
            pq.pop();
        }
    }

    return pq.top();
}
